-----------------------------------------------------------------------------------------------------------------------------------------------------------
Для первоначальных настроек:
git config —global user.name "Vova"			(имя используемое во всех проектах)
git config —global user.email patutin.vovan@mail.ru	(email используемое во всех проектах)
git config —global core.editor "FullPathToEditor"	(указание нового текстового редактора)
git config —list 					(узнать все данные, которые использует git)
//--global 						(означает использование указанных данным во всех проектах, если его убрать, то произойдет использование данных в локальных проектах)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Для синхронизации версий:
git init					(для создания .git)
git status 					(для проверки статуса директорий и файлов)
git add NameOfDirectory				(индексация на локальном сервере и добавление для отслеживания на сервере)
git commit -m "InformationAboutCommit"		(сохранение изменений на локальном сервере)
git remote add origin LinkOfRepositorie		(для указания репозитория с которым синхронизироваться)
git push 					(для синхронизации серверов) 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Слияние веток:
git checkout NameOfDrainedBranch	(Переход в ветку, которую будем слиять)
git pull				(Подгрузка коммитов данной директории)
git checkout NameOfMainBranch		(Переход в ветку, с которой будем слиять)
git pull				(Подгрузка коммитов данной директории)
git merge NameOfDrainedBranch		(Слияние веток)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Переиндексация:
git commit -m "HelloWorld"	(Делаем коммит)
git add NameOfFile		(Добавляем файл,который забыли добавить)
git commit —amend		(Делаем перекоммит)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Псевдонимы в Git					(задание синонимов в Git):
git config --global alias.co checkout 			(теперь вместо "git checkout" можно просто ввести "git co")
git config --global alias.unstage 'reset HEAD --'	(теперь вместо "git reset HEAD -- fileA" можно просто ввести "git unstage fileA")
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Немного о .gitignire:
-Создается .gitignore и в него помещаются все файлы и папки, которые не должны быть проиндексированны и заброшены на репозиторий.
-А какого нам просто не добавлять их?
-В больших проектах используются определнные билдеры, которые облегчают вход нового сотрудника в команду, их структура отличается от обычного java проекта,
		 там стоит использовать .gitignore для облегчения
-Задается умный вопрос...
-А я хуй знает, особо эту тему не изучал, все юзают и говорят, что так надо делать и это удобно, поэтому не быкуй и когда-нибудь узнаешь логику этого.

touch .gitignore
echo NameOfFile > .gitignore
git add .gitignore
git commit -m"TextOfCommit"
git push
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Важные команды:
git clone FullPath 		(копирование всего проекта и его коммитов)
git diff 			(показывает подробные изменения в файле, т.е добавленные и удаленные строки и т.д, но показывает изменения, которые не проиндексированы)
git rm 				(удаление файла)
git mv FirstName LastName	(переименовывание файла)
git log 			(просмотр истории коммитов)
git reset NumeOfFile 		(удаление файла из индексации)
git remote -v 			(показывает все клонированные репозитории)
git push <remote> <branch> 	(синхронизация репозиториев)
git merge			(Объединяет независимые линии разработки в единую ветвь, расставляя коммиты по времени их создания)
git pull			(Подгружает коммиты данной директории и делает слияние их)
git fetch			(Подгружает все коммиты, которых нет)
git branch 			(Выводит список всех веток в репозитории)
git branch NameOfNewBranch	(создает новый branch)
git checkout SHA-1OfCommit	(Востанавливает версию программы, когда был сделан коммит)
git checkout NameOfBranch 	(Востанавливает версию самой последней программы)
git checkout NameOfBranch 	(Переход в другой branch)
git checkout -b NameOfNewBranch	(Создание branch и переключает на него)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Дополнительные команды:
git status —short 			(упрощенный вывод)
git add *				(индексирует все файлы)
git add .				(индексирует все файлы в данном каталоге и его подкаталогах)
git commit -a "Commit"			(заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл)
git rm —cached NameOfFile 		(файл перестает отслеживаться Git)
git log —path				(показывает разницу, внесенную в каждый коммит)
git log —pretty=format:"%h - %an, %s"	(позволяет указать формат для вывода информации)
git log -N 				(N представляет количество последних коммитов, которые надо вывести)
git log —since=N.weeks			(выводит все коммиты за N недель)
git log —grep=Word			(вывод все коммиты в которых есть данное слово)
git push origin -all 			(Помещает все локальные ветки в удаленный репозиторий)
git pull --rebase			(Объединяет независимые линии разработки в единую ветвь, расставляя коммиты сначала из master, а потом из другого branch)
git branch -d NameOfBranch 		(Удаляет ветку.Если есть не объединенные изменения, Git не позволяет удалить их)
git branch -a				(Выводит список всех удаленных веток)
-----------------------------------------------------------------------------------------------------------------------------------------------------------

???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
Информация относительно команд:

Символ (*) соответствует 0 или более символам;
последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c);
знак вопроса (?) соответствует одному символу;
квадратные скобки, в которые заключены символы, разделённые дефисом ([0-9]), соответствуют любому символу из интервала (в данном случае от 0 до 9)

%H - Хеш коммита
%h - Сокращенный хеш коммита
%T - Хеш дерева
%t - Сокращенный хеш дерева
%P - Хеш родителей
%p - Сокращенный хеш родителей
%an - Имя автора
%ae - Электронная почта автора
%ad - Дата автора
%ar -Относительная дата автора
%cn -Имя коммитера
%ce -Электронная почта коммитера
%cd -Дата коммитера
%cr -Относительная дата коммитера
%s -Содержание
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
Общая информация:

индексация- добавление изменений папки или файла в .git
Untracked files(??) -файл не отслеживается gitом
Changes to be committed(А) -файл проиндексирован и ожидает коммита
Changes not staged for commit(M) - файл не проиндексирован

<remote>- имя по умолчанию, которое Git дает серверу, с которого вы клонировали(Пример:origin,-)
<branch>-ветка которая должна отправиться
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Полезные ссылки, которые при такой реакции "Че это за херня тут написана?" помогут разобраться:
https://www.w3docs.com/learn-git/introduction4.html
https://git-scm.com/book/ru/v2
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++